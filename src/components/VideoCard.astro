---
// src/components/VideoCard.astro
import { slugify } from '../utils/slugify';
import type { VideoData } from '../utils/data';
import { url } from '../utils/site.ts';

export interface Props {
  video: VideoData;
  // Tambahkan prop opsional ini
  headingLevel?: 'h2' | 'h3'; 
}

// Set default headingLevel ke 'h2'
const { video, headingLevel = 'h2' } = Astro.props; 
const videoSlug = slugify(video.title);

// Pastikan videoDetailPath terbentuk dengan benar,
// atau Anda bisa passing langsung dari komponen pemanggil jika lebih fleksibel
const videoDetailPath = `${url}/${videoSlug}-${video.id}/`;

---

<a href={videoDetailPath} class="video-card">
  <div class="thumbnail-container">
    <img
      src={video.thumbnail}
      alt={video.title}
      title={video.title}
      loading="lazy"
      class="video-thumbnail"
    />
    {video.previewUrl && (
      <video
        preload="none"
        loop
        muted
        class="video-preview"
        data-src={video.previewUrl}
        onerror="this.closest('.video-card').classList.add('video-preview-error');"
      >
      </video>
    )}
  </div>
  <div class="video-info">
    {/* Logika kondisional untuk merender H2 atau H3 */}
    {headingLevel === 'h2' ? (
      <h2 class="video-title">{video.title}</h2>
    ) : (
      <h3 class="video-title">{video.title}</h3>
    )}
    <p class="video-category">{video.category}</p>
  </div>
</a>

<script>
  document.querySelectorAll('.video-card').forEach(card => {
    const videoPreview = card.querySelector('.video-preview');

    if (videoPreview) {
      // playTimeout is no longer needed for the delay, but we'll keep it for desktop-specific logic if needed elsewhere.
      // If this is the only place it's used, you can actually remove `let playTimeout;` entirely.

      card.addEventListener('mouseenter', () => {
        // No clearTimeout(playTimeout) here, as there's no timeout to clear for instant playback.
        
        // Directly execute the playback logic without any delay
        if (!card.classList.contains('video-preview-error')) {
          const src = videoPreview.getAttribute('data-src');
          if (src && videoPreview.src !== src) {
            videoPreview.src = src;
            videoPreview.load();
          }
          videoPreview.play().catch(e => {
            console.warn('Video playback failed, adding error class:', e);
            card.classList.add('video-preview-error');
          });
        }
      });

      card.addEventListener('mouseleave', () => {
        // No clearTimeout(playTimeout) here, as there's no pending timeout from mouseenter.
        if (videoPreview && !videoPreview.paused) {
          videoPreview.pause();
          videoPreview.currentTime = 0; // Reset to start
        }
      });
    }
  });
</script>